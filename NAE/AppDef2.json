{
  "name": "OpenFOAM&reg; 10",
  "description": "OpenFOAM has an extensive range of features to solve anything from complex fluid flows involving chemical reactions, turbulence and heat transfer, to acoustics, solid mechanics and electromagnetics",
  "author": "OpenCFD Ltd",
  "licensed": true,
  "classifications": [
    "Simulation/Computational Fluid Dynamics"
  ],
  "machines": [
    "n*"
  ],
  "vault-types": [
    "FILE"
  ],
  "commands": {
    "GUI": {
      "path": "/usr/local/scripts/start-openfoam-viz.sh",
      "interactive": true,
      "name": "OpenFOAM GUI",
      "description": "Run OpenFOAM&reg; with the ParaView/paraFoam graphical user interface (GUI). Case will be run from /data/openfoam10/run ($FOAM_RUN)",
      "machines": [
        "n*"
      ],
      "parameters": {}
    },
    "Batch": {
      "path": "/usr/local/scripts/openfoam-batch.sh",
      "interactive": true,
      "name": "OpenFOAM Batch",
      "description": "Run OpenFOAM&reg; for a case thru decompose, mesh and solve stages with MPI, Case should be run from /data/openfoam10/run ($FOAM_RUN)",
      "parameters": {
        "-case": {
          "required": true,
          "type": "FILE",
          "name": "OpenFOAM case, select any file in the case directory"
        },
        "-mesh": {
          "type": "BOOL",
          "required": true,
          "value": true,
          "name": "Run mesh generation?",
          "description": "Select here to run the selected mesh generation utility on the Case"
        },
        "-meshtype": {
          "values": [
            "blockMesh",
            "extrude2DMesh",
            "extrudeMesh",
            "extrudeToRegionMesh",
            "foamyHexMesh",
            "foamyQuadMesh",
            "snappyHexMesh"
          ],
          "required": true,
          "type": "selection",
          "name": "Mesh generator"
        },
        "-solver": {
          "values": [
            "laplacianFoam",
            "potentialFoam",
            "scalarTransportFoam",
            "adjointShapeOptimizationFoam",
            "boundaryFoam",
            "foamyQuadMesh",
            "icoFoam",
            "nonNewtonianIcoFoam",
            "pimpleFoam",
            "SRFPimpleFoam",
            "pisoFoam",
            "simpleFoam",
            "porousSimpleFoam",
            "SRFSimpleFoam",
            "rhoCentralFoam",
            "rhoPimpleFoam",
            "rhoPorousSimpleFoam",
            "cavitatingFoam",
            "compressibleInterFoam",
            "compressibleInterFilmFoam",
            "compressibleMultiphaseInterFoam",
            "driftFluxFoam",
            "interFoam",
            "interMixingFoam",
            "interPhaseChangeFoam",
            "multiphaseEulerFoam",
            "multiphaseInterFoam",
            "potentialFreeSurfaceFoam",
            "reactingMultiphaseEulerFoam",
            "interPhaseChangeFoam",
            "reactingTwoPhaseEulerFoam",
            "twoLiquidMixingFoam",
            "twoPhaseEulerFoam",
            "dnsFoam",
            "reactingTwoPhaseEulerFoam",
            "chemFoam",
            "reactingTwoPhaseEulerFoam",
            "coldEngineFoam",
            "engineFoam",
            "fireFoam",
            "PDRFoam",
            "reactingFoam",
            "rhoReactingBuoyantFoam",
            "rhoReactingFoam",
            "XiengineFoam",
            "XiFoam",
            "buoyantPimpleFoam",
            "buoyantSimpleFoam",
            "chtMultiRegionFoam",
            "thermoFoam",
            "coalChemistryFoam",
            "DPMFoam",
            "MPPICFoam",
            "icoUncoupledKinematicParcelFoam",
            "reactingParcelFoam",
            "simpleReactingParcelFoam",
            "sprayFoam",
            "uncoupledKinematicParcelFoam",
            "dsmcFoam",
            "mdEquilibrationFoam",
            "mdFoam",
            "electrostaticFoam",
            "magneticFoam",
            "mhdFoam",
            "solidDisplacementFoam",
            "solidEquilibriumDisplacementFoam",
            "financialFoam"
          ],
          "required": true,
          "type": "selection",
          "name": "Solver"
        }
      }
    },
    "Benchmark": {
      "path": "/usr/local/scripts/openfoam-benchmark.sh",
      "interactive": false,
      "name": "OpenFOAM Benchmark",
      "description": "Run OpenFOAM&reg; benchmark using an example file",
      "parameters": {
        "-num_procs": {
          "value": 0,
          "min": 0,
          "max": 2048,
          "required": true,
          "type": "INT",
          "name": "Number of processes per node to use (0 is all)."
        },
        "-num_nodes": {
          "value": 0,
          "min": 0,
          "max": 2048,
          "type": "INT",
          "required": true,
          "name": "Number of nodes to use (0 is all)"
        },
        "-numberOfCells": {
          "value": 8000,
          "min": 1000,
          "max": 100000000000000,
          "type": "INT",
          "required": true,
          "name": "Desired number of cells in mesh"
        },
        "-interconnect": {
          "values": [
            "ib",
            "ethernet"
          ],
          "required": true,
          "type": "selection",
          "name": "MPI Connector Type"
        },
        "-benchmark_case": {
          "values": [
            "cavity"
          ],
          "required": true,
          "type": "selection",
          "name": "Benchmark Case"
        }
      }
    }
  },
  "image": {
    "type": "image/png",
    "data": "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"
  }
}
